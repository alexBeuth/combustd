require 'usb'
require '../../libcombustd/data/protocoldefinitions'
require '../../libcombustd/data/lights'
require '../../libcombustd/communication/ambx'

puts "\nRunning test-loop\n"

# Some dummy code to test the Ambx interface
if Ambx.connect
  if Ambx.open
    while (true)
      Ambx.write([0xA1, 0x0B, 0x03, 0x00, 0xFF, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0x00, 0xFF, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0x00, 0xFF, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0x00, 0xFF, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0x00, 0xFF, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0x00, 0x00, 0xFF])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0x00, 0x00, 0xFF])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0x00, 0x00, 0xFF])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0x00, 0x00, 0xFF])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0x00, 0x00, 0xFF])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0xCC, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0xCC, 0x00, 0x00])
      sleep 1
      Ambx.write([0xA1, 0x0B, 0x03, 0x00, 0x00, 0x00])
      Ambx.write([0xA1, 0x2B, 0x03, 0x00, 0x00, 0x00])
      Ambx.write([0xA1, 0x3B, 0x03, 0x00, 0x00, 0x00])
      Ambx.write([0xA1, 0x4B, 0x03, 0x00, 0x00, 0x00])
      Ambx.write([0xA1, 0x1B, 0x03, 0x00, 0x00, 0x00])
      sleep 1
    end
    Ambx.close
  else
    puts "Unable to open the discovered device"
  end
else
  puts "Unable to find a ambx device"
end